# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [cl, clang]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v3

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
    - name: Install Meson (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt update
        sudo apt install -y meson ninja-build libpsl-dev
    - name: Install Meson (Windows)
      if: runner.os == 'Windows'
      run: |
        python -m pip install --upgrade pip
        pip install meson ninja
      shell: pwsh
    - name: Normalize Build Output Directory (Windows)
      run: |
        $normalizedDir = "${{ steps.strings.outputs.build-output-dir }}".Replace("\", "/")
        echo $normalizedDir
        echo "NORMALIZED_DIR=$normalizedDir" | Out-File -FilePath $env:GITHUB_ENV -Append
      shell: pwsh
      if: runner.os == 'Windows'
    - name: Normalize Build Output Directory (Linux)
      run: |
        normalizedDir=$(echo ${{ steps.strings.outputs.build-output-dir }} | tr '\\' '/')
        echo "NORMALIZED_DIR=$normalizedDir" >> $GITHUB_ENV
      shell: bash
      if: runner.os == 'Linux'
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}
    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}
    - name: Rename (Linux)
      shell: bash
      run: mv ${{ env.NORMALIZED_DIR }}/src/sigscan ${{ env.NORMALIZED_DIR }}/src/sigscan-linux.elf
      if: runner.os == 'Linux'

    - name: Rename (Windows)
      shell: bash
      run: mv ${{ env.NORMALIZED_DIR }}/src/Release/sigscan.exe ${{ env.NORMALIZED_DIR }}/src/sigscan-windows.exe
      if: runner.os == 'Windows'

    - name: Set Git Identity
      run: |
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
    - name: Create Git Tag
      run: git tag -a -m "Release ${{ github.sha }}" v${{ github.sha }}
    - name: GH Release (Windows)
      uses: softprops/action-gh-release@v0.1.15
      with:
        files: ${{ env.NORMALIZED_DIR }}/src/sigscan-windows.exe
        tag_name: v${{ github.sha }}
        name: 'Latest Release'
      if: runner.os == 'Windows'
    - name: GH Release (Linux)
      uses: softprops/action-gh-release@v0.1.15
      with:
        files: ${{ env.NORMALIZED_DIR }}/src/sigscan-linux.elf
        tag_name: v${{ github.sha }}
        name: 'Latest Release'
      if: runner.os == 'Linux'
